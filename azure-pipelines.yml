# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
     - task: TerraformInstaller@1
       inputs:
         terraformVersion: 'latest'

     - task: TerraformTask@5
       inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'Malipeddi Dinesh - 21/02/25(01202567-6e50-4f04-b07a-77bb79f043f9)'
          backendAzureRmStorageAccountName: 'sttfstateazdoprac'
          backendAzureRmContainerName: 'tfstatecontainer'
          backendAzureRmKey: 'prod.terraform.tfstate'
     - task: TerraformTask@5
       inputs:
         provider: 'azurerm'
         command: 'validate'
      
     - task: TerraformTask@5
       inputs:
         provider: 'azurerm'
         command: 'plan'
         commandOptions: '-out=$(Build.ArtifactStagingDirectory)/tftestplan -detailed-exitcode -var-file="terraform.tfvars" -var-file="env-dev.tfvars"'
         environmentServiceNameAzureRM: 'Malipeddi Dinesh - 21/02/25(01202567-6e50-4f04-b07a-77bb79f043f9)'

     - task: ArchiveFiles@2
       inputs:
         rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
         includeRootFolder: false
         archiveType: 'zip'
         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
         replaceExistingArchive: true

     - task: PublishBuildArtifacts@1
       inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: '$(Build.BuildId)-dnkbuild'
        publishLocation: 'Container'
       
